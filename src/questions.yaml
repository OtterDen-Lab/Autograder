category: misc
name: Bits and Bytes
value: 2
functions:
  instantiate: |
    import math
    self.from_binary = random.choice([True, False])
    self.num_bits = random.choice(range(3,40))
    self.num_bytes = int(math.pow(2, self.num_bits))
    if self.from_binary:
      self.answers = [Answer("num_bytes", self.num_bytes, Answer.AnswerKind.BLANK)]
    else:
      self.answers = [Answer("num_bits", self.num_bits, Answer.AnswerKind.BLANK)]
  get_body_lines: |
    lines = [
      f"Given that we have {self.num_bits if self.from_binary else self.num_bytes} {'bits' if self.from_binary else 'bytes'}, "
      f"how many {'bits' if not self.from_binary else 'bytes'} "
      f"{'do we need to address our memory' if not self.from_binary else 'of memory can be addressed'}?"
      "",
      f"{'Address space size' if self.from_binary else 'Number of bits in address'}: [{self.answers[0].key}] {'bits' if not self.from_binary else 'bytes'}"
    ]
    return lines
  get_explanation_lines: |
    explanation_lines = [
      "Remember that for these problems we use one of these two equations (which are equivalent)",
      "",
      r"- $log_{2}(\text{#bytes}) = \text{#bits}$",
      r"- $2^{(\text{#bits})} = \text{#bytes}$",
      "",
      "Therefore, we calculate:",
    ]
  
    if self.from_binary:
      explanation_lines.extend([
        f"\\( 2 ^ {{{self.num_bits}bits}} = \\textbf{{{self.num_bytes}}}bytes \\)"
      ])
    else:
      explanation_lines.extend([
        f"$log_{2}({self.num_bytes} \\text{{bytes}}) = \\textbf{{{self.num_bits}}}\\text{{bits}}$"
      ])
  
    return explanation_lines
  get_answers: |
    return Answer.AnswerKind.BLANK, [a.get_for_canvas() for a in self.answers]

